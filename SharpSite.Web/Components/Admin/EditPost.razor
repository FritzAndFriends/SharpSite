@page "/admin/post/{urldate:int?}/{slug?}"

@inject IOutputCacheStore OutputCacheStore
@inject IPostRepository PostService
@inject NavigationManager NavManager
@inject IStringLocalizer<SharedResource> Localizer
@rendermode InteractiveServer

<PageTitle>
    @if (string.IsNullOrEmpty(Slug))
    {
        <text>@Localizer["sharpsite_newpost"]</text>
    }
    else
    {
		<text>@Localizer["sharpsite_editpost"]</text>
    }
</PageTitle>

<h1>
    @if (string.IsNullOrEmpty(Slug))
    {
        <text>@Localizer["sharpsite_newpost"]</text>
    }
    else
    {
        <text>@Localizer["sharpsite_editpost"]</text>
    }
</h1>

@if (Post is not null)
{
<div class="form-group">
    <label for="title">@Localizer["sharpsite_editpost_title"]</label>
	<input type="text" class="form-control" id="title" placeholder="Enter title" @bind="Post.Title" />
</div>

@** add a publish date field *@
<div class="form-group">
    <label for="publishDate">@Localizer["sharpsite_editpost_publishdate"]</label>
	<input type="date" class="form-control" id="publishDate" @bind="Post.PublishedDate" />
</div>

@** add a textarea for the Post description *@
<div class="form-group">
	<label for="description">@Localizer["sharpsite_editpost_description"]</label>
	<textarea class="form-control" id="description" rows="3" @bind="Post.Description"></textarea>
</div>

<div class="form-group">
    <label for="content">@Localizer["sharpsite_editpost_content"]</label>
	<TextEditor @bind-Content="@Post.Content" />
</div>

}

<div class="form-group">
	<button type="submit" class="btn btn-primary" @onclick="SavePost">@Localizer["sharpsite_save"]</button>
</div>
@code {
		[Parameter] public string? Slug { get; set; }
		[Parameter] public int? UrlDate { get; set; }

		private Post? Post { get; set; }

		protected override async Task OnInitializedAsync()
		{
				Post = (await PostService.GetPost(UrlDate?.ToString() ?? string.Empty, Slug ?? string.Empty)) ?? new Post() {
					Slug= string.Empty,
					Content = string.Empty,
					Title = string.Empty,
					PublishedDate = DateTime.Now
				};

		}

		private async Task SavePost()
		{

				Console.WriteLine("Save Post");	


				if (string.IsNullOrEmpty(Post!.Slug))
				{
					Post.Slug = Post.GetSlug(Post.Title);
					Console.WriteLine(Post.Slug);
					await PostService.AddPost(Post);

					// flush the outputcache for the sitemap and rss
					await FlushCache();

					NavManager.NavigateTo("/");
				}
				else
				{
					await PostService.UpdatePost(Post);
					await FlushCache();
					NavManager.NavigateTo("/");
				}
		}

		private async Task FlushCache()
		{
				await OutputCacheStore.EvictByTagAsync("sitemap", CancellationToken.None);
				await OutputCacheStore.EvictByTagAsync("rss", CancellationToken.None);
		}

}