@page "/admin/addplugin"
@attribute [Authorize(Roles = Constants.Roles.Admin)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject PluginManager PluginManager
@inject NavigationManager NavigationManager

<h3>Add a Plugin to SharpSite</h3>

<div class="form-group">
	<label for="pluginFile">Plugin File</label>
	<InputFile class="form-control-file" id="pluginFile"
						 accept=".sspkg" OnChange="OnInputFileChange" />
</div>

  @if (PluginManager.Manifest != null)
{
	@* add the id field from the manifest*@
	<div class="form-group">
		<label for="pluginId">Plugin Id</label>
		<input type="text" class="form-control" id="pluginId" value="@PluginManager.Manifest.id" readonly />
	</div>
	<div class="form-group">
		<label for="pluginName">Plugin Name</label>
		<input type="text" class="form-control" id="pluginName" value="@PluginManager.Manifest.DisplayName" readonly />
	</div>
	<div class="form-group">
		<label for="pluginVersion">Plugin Version</label>
		<input type="text" class="form-control" id="pluginVersion" value="@PluginManager.Manifest.Version" readonly />
	</div>
	<div class="form-group">
		<label for="pluginDescription">Plugin Description</label>
		<input type="text" class="form-control" id="pluginDescription" value="@PluginManager.Manifest.Description" readonly />
	</div>
	<div class="form-group">
		<label for="pluginAuthor">Plugin Author</label>
		<input type="text" class="form-control" id="pluginAuthor" value="@PluginManager.Manifest.Author" readonly />
	</div>
	<div class="form-group">
		<label for="pluginWebsite">Plugin Website</label>
		<input type="text" class="form-control" id="pluginWebsite" value="@PluginManager.Manifest.AuthorWebsite" readonly />
	</div>

	@* add an accept and reject button *@
	<div class="form-group">
		<button class="btn btn-primary" @onclick="SavePlugin">Accept</button>
		<button class="btn btn-danger" @onclick="RejectPlugin">Reject</button>
	</div>

}


@code {


	private string ErrorMessage = string.Empty;

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		try
		{
			await PluginManager.HandleUploadedPlugin(e.File);
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;

		}

	}


	private async Task SavePlugin()
	{
		await PluginManager.SavePlugin();
		NavigationManager.NavigateTo("/admin/plugins");
	}
	private void RejectPlugin(MouseEventArgs e)
	{
		// Navigate back to the list of plugins
		NavigationManager.NavigateTo("/admin/plugins");
	}
}
