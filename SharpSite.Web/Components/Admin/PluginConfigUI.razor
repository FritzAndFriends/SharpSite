@page "/admin/pluginconfig/{pluginName}"
@using SharpSite.Abstractions.Base
@attribute [Authorize(Roles = Constants.Roles.Admin)]
@inject ApplicationState AppState
@rendermode InteractiveServer
@using System.ComponentModel
@using System.Reflection

<h2>@ConfigurationSection?.SectionName</h2>

@if (ConfigurationSection is null)
{
	@* Loading indicator *@
	<p><em>Loading...</em></p>
}
else if (MissingPlugin)
{
	<p><em>Plugin not found</em></p>
}
else
{

	@* dynamically generate a form based on the properties in the ConfigurationSection.  Use ComponentAttributes as much as possible to configure *@
	@* the form elements. *@
	<EditForm Model="ConfigurationSection" OnValidSubmit="SaveChanges">
		<DataAnnotationsValidator />
		@foreach (var prop in ConfigurationSection.GetType().GetProperties())
		{
			@if (prop.Name == "SectionName") continue;
			else if (prop.PropertyType == typeof(string))
			{
				var displayName = prop.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? prop.Name;
				<div class="form-group">
					<label for="@prop.Name">@displayName</label>
					<input type="text" class="form-control" id="@prop.Name" 
						placeholder="@displayName" 
						value="@prop.GetValue(ConfigurationSection)"
						@onchange="@(args => ModifyProperty(prop.Name, args))" />
					@* <ValidationMessage For="@(() => ConfigurationSection.GetType().GetProperty(prop.Name)!.GetValue(ConfigurationSection))" /> *@
				</div>
			}
		}
		<button type="submit" class="btn btn-primary">Submit</button>
	</EditForm>

}

@code {

	[Parameter, EditorRequired]
	public required string PluginName { get; set; }

	private bool MissingPlugin { get; set; } = false;

	public ISharpSiteConfigurationSection ConfigurationSection { get; set; } = null!;

	protected override void OnInitialized()
	{
		if (!AppState.ConfigurationSections.ContainsKey(PluginName))
		{
			MissingPlugin = true;
		}
		else
		{
			ConfigurationSection = AppState.ConfigurationSections[PluginName];
		}

		base.OnInitialized();
	}
	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}
	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
	}
	private void ModifyProperty(string propertyName, ChangeEventArgs e)
	{
		// use reflection to set the property value on ConfigurationSection

		var propertyInfo = ConfigurationSection.GetType().GetProperty(propertyName);
		if (propertyInfo != null)
		{
			propertyInfo.SetValue(ConfigurationSection, e.Value);
		}

	}

	private async Task SaveChanges()
	{
		// save the changes to the configuration section
		AppState.ConfigurationSections[ConfigurationSection.SectionName] = ConfigurationSection;
		await AppState.Save();
	}
}
