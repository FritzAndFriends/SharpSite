@using PSC.Blazor.Components.MarkdownEditor
@using PSC.Blazor.Components.MarkdownEditor.EventsArgs
@using PSC.Blazor.Components.MarkdownEditor.Models
@using SharpSite.Abstractions.FileStorage
@inject PluginManager pluginManager
@inject NavigationManager NavigationManager


<MarkdownEditor @bind-Value="@MyContent"
CustomImageUpload="@HandleImageUpload"
UploadImage="true" />

@code {

	private string _Content = string.Empty;
	private string MyContent
	{
		get => _Content;
		set
		{
			_Content = value;
			ContentChanged.InvokeAsync(value);
		}
	}

	[Parameter, EditorRequired]
	public string Content { get => _Content; set => _Content = value; }


	[Parameter]
	public EventCallback<string> ContentChanged { get; set; }

	IHandleFileStorage? FileStorage;

	protected override void OnInitialized()
	{
		FileStorage = pluginManager.GetPluginProvidedService<IHandleFileStorage>();
		base.OnInitialized();
	}

	async Task<FileEntry> HandleImageUpload(MarkdownEditor editor, FileEntry file)
	{
		Console.WriteLine($"Image: {file.Name} Size: {file.Size}");

		// COnvert the base64 string to a byte array and load it into a memory stream
		var bytes = Convert.FromBase64String(file.ContentBase64);
		var stream = new MemoryStream(bytes);

		var fileName = await FileStorage!.AddFile(new FileData(stream, new FileMetaData(file.Name, "", file.LastModified)));
		file.UploadUrl = new Uri(new Uri(NavigationManager.BaseUri), $"/api/files/{fileName}").ToString();
		return file;
	}

}