@page "/admin/pluginconfig/{pluginName}"
@using Newtonsoft.Json
@using SharpSite.Abstractions.Base
@attribute [Authorize(Roles = Constants.Roles.Admin)]
@inject ApplicationState AppState
@rendermode InteractiveServer
@using System.ComponentModel
@using System.Reflection

<h2>@ConfigurationSection?.SectionName</h2>

@if (ConfigurationSection is null)
{
	@* Loading indicator *@
	<p><em>Loading...</em></p>
}
else if (MissingPlugin)
{
	<p><em>Plugin not found</em></p>
}
else
{

	if (!string.IsNullOrEmpty(StatusMessage))
	{
		<div class="alert alert-info" role="alert">
			@if (!string.IsNullOrEmpty(StatusMessage))
			{
				<div class="alert @(StatusIsError ? "alert-danger" : "alert-info")" role="alert">
					@StatusMessage
				</div>
			}
			@StatusMessage
		</div>
	}

	<EditForm EditContext="Context" OnValidSubmit="SaveChanges">
		<DataAnnotationsValidator />
		@foreach (var prop in ConfigurationSection.GetType().GetProperties())
		{
			@if (prop.Name == "SectionName") continue;
			else if (prop.PropertyType == typeof(string))
			{
				var displayName = prop.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? prop.Name;
				<div class="form-group">
					<label for="@prop.Name">@displayName</label>

					<EditProperty Entity="ConfigurationSection" Property="prop" OnPropertyChanged="StateHasChanged"></EditProperty>

				</div>
			}
		}

		<p>
			<button type="submit" class="btn btn-primary mt-2" disabled="@(!Context.Validate())">Submit</button>
		</p>
	</EditForm>

}

@code {

	[Parameter, EditorRequired]
	public required string PluginName { get; set; }

	private bool MissingPlugin { get; set; } = false;

	public ISharpSiteConfigurationSection ConfigurationSection { get; set; } = null!;

	public required EditContext Context { get; set; }

	public string StatusMessage { get; set; } = string.Empty;

	public bool StatusIsError { get; set; } = false;

	protected override void OnInitialized()
	{
		if (!AppState.ConfigurationSections.ContainsKey(PluginName))
		{
			MissingPlugin = true;
		}
		else
		{

			// use Newtonsoft.Json to serialize and then deserialize the configuration section

			ConfigurationSection = AppState.CloneSection(PluginName);

		}

		Context = new EditContext(ConfigurationSection);

		base.OnInitialized();
	}

	private void ModifyProperty(string propertyName, ChangeEventArgs e)
	{
		// use reflection to set the property value on ConfigurationSection

		var propertyInfo = ConfigurationSection.GetType().GetProperty(propertyName);
		if (propertyInfo != null)
		{
			propertyInfo.SetValue(ConfigurationSection, e.Value);
		}

	}


	private async Task SaveChanges()
	{
		try
		{
			// save the changes to the configuration section
			AppState.SetConfigurationSection(ConfigurationSection);

			await AppState.Save();

			StatusMessage = "Configuration saved successfully.";
			StatusIsError = false;
		}
		catch (Exception ex)
		{
			StatusMessage = $"Error saving configuration: {ex.Message}";
			StatusIsError = true;
		}

	}
}
