@page "/admin/post/{urldate:int?}/{slug?}"
@attribute [Authorize()]
@inject IOutputCacheStore OutputCacheStore
@inject IPostRepository PostService
@inject NavigationManager NavManager
@inject IStringLocalizer<SharedResource> Localizer
@rendermode InteractiveServer

<PageTitle>
	@Localizer[string.IsNullOrEmpty(Slug) ? SharedResource.sharpsite_newpost : SharedResource.sharpsite_editpost]
</PageTitle>

<h1>
	@Localizer[string.IsNullOrEmpty(Slug) ? SharedResource.sharpsite_newpost : SharedResource.sharpsite_editpost]
</h1>

@if (Post is not null)
{
	<div class="mb-2">
		<label class="form-label" for="title">@Localizer[SharedResource.sharpsite_editpost_title]</label>
		<input type="text" class="form-control" id="title" placeholder="@Localizer[SharedResource.sharpsite_editpost_title]" @bind="Post.Title" />
	</div>

	@** add a publish date field *@
	<div class="mb-2">
		<label class="form-label" for="publishDate">@Localizer[SharedResource.sharpsite_editpost_publishdate]</label>
		<input type="date" class="form-control" id="publishDate" @bind="Post.PublishedDate" />
	</div>

	@** add a textarea for the Post description *@
	<div class="mb-2">
		<label class="form-label" for="description">@Localizer[SharedResource.sharpsite_editpost_description]</label>
		<textarea class="form-control" id="description" rows="3" @bind="Post.Description"></textarea>
	</div>

	<div class="mb-2">
		<label class="form-label" for="content">@Localizer[SharedResource.sharpsite_editpost_content]</label>
		<TextEditor @bind-Content="@Post.Content" AlignmentOptionsEnabled="true" />
	</div>

	<LanguageSelect @bind-Language="@Post.LanguageCode" />

	<ConfirmSaveButton
		AlertMessage="@SharedResource.sharpsite_script_alert_page"
		ConfirmationRequired="_ConfirmationRequired"
		SaveCallback="SavePost"
		CancelCallback="() => _ConfirmationRequired = false" />
}

@code {
	[Parameter] public string? Slug { get; set; }
	[Parameter] public int? UrlDate { get; set; }

	private Post? Post { get; set; }
	private bool _ConfirmationRequired = false;

	protected override async Task OnInitializedAsync()
	{
		Post = (await PostService.GetPost(UrlDate?.ToString() ?? string.Empty, Slug ?? string.Empty)) ?? new Post()
		{
			Slug = string.Empty,
			Content = string.Empty,
			Title = string.Empty,
			PublishedDate = DateTime.Now
		};

	}

	private async Task SavePost()
	{

		if (!_ConfirmationRequired && MarkdownHelper.ContainsScriptTag(Post!.Content))
		{
			_ConfirmationRequired = true;
			return;
		}

		if (string.IsNullOrEmpty(Post!.Slug))
		{
			Post.Slug = Post.GetSlug(Post.Title);
			await PostService.AddPost(Post);
		}
		else
		{
			await PostService.UpdatePost(Post);
		}
		await FlushCache();
		NavManager.NavigateTo("/admin/posts");

	}

	private async Task FlushCache()
	{
		await OutputCacheStore.EvictByTagAsync("sitemap", CancellationToken.None);
		await OutputCacheStore.EvictByTagAsync("rss", CancellationToken.None);
	}

}
